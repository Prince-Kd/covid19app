{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _readOnlyError from \"@babel/runtime/helpers/readOnlyError\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mawuli Kwadzofio\\\\Desktop\\\\appClone\\\\covid-19-data-app\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Header from \"./components/header\";\nimport Stats from \"./components/stats\";\nimport Countries from \"./components/countries\";\nimport Statistics from \"./components/statistics\";\nimport ApolloClient from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport get_stats from \"./queries\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nexport default function App() {\n  var client = new ApolloClient({\n    uri: 'https://covid19-graphql.netlify.app/'\n  });\n  var date = Date().toString();\n\n  var _useState = useState('Ghana'),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  useEffect(function requestData() {\n    client.query({\n      query: get_stats\n    }).then(function (response) {\n      data = (_readOnlyError(\"data\"), response.data);\n      setData(data);\n    }).catch(function (error) {\n      console.log('ERROR ==>', error);\n    });\n  });\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }), React.createElement(Stats, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }), React.createElement(Countries, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }), React.createElement(Statistics, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    style: {\n      textAlign: 'right'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"Last Updated:\", date)));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    padding: 8\n  }\n});","map":{"version":3,"sources":["C:/Users/Mawuli Kwadzofio/Desktop/appClone/covid-19-data-app/App.js"],"names":["React","useState","useEffect","Header","Stats","Countries","Statistics","ApolloClient","useQuery","get_stats","ApolloProvider","App","client","uri","date","Date","toString","data","setData","requestData","query","then","response","catch","error","console","log","styles","container","textAlign","StyleSheet","create","flex","backgroundColor","padding"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;;AAEA,OAAOC,MAAP;AACA,OAAOC,KAAP;AACA,OAAOC,SAAP;AACA,OAAOC,UAAP;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,SAAP;AACA,SAASC,cAAT,QAA+B,qBAA/B;AAGA,eAAe,SAASC,GAAT,GAAe;AAE5B,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,IAAAA,GAAG,EAAE;AADyB,GAAjB,CAAf;AAIA,MAAMC,IAAI,GAAIC,IAAI,EAAL,CAASC,QAAT,EAAb;;AAN4B,kBAOLf,QAAQ,CAAC,OAAD,CAPH;AAAA;AAAA,MAOtBgB,IAPsB;AAAA,MAOhBC,OAPgB;;AAU5BhB,EAAAA,SAAS,CACP,SAASiB,WAAT,GAAuB;AACrBP,IAAAA,MAAM,CAACQ,KAAP,CAAa;AACXA,MAAAA,KAAK,EAAEX;AADI,KAAb,EAGCY,IAHD,CAGM,UAAAC,QAAQ,EAAI;AAChBL,MAAAA,IAAI,4BAAGK,QAAQ,CAACL,IAAZ,CAAJ;AACAC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KAND,EAOCM,KAPD,CAOO,UAAAC,KAAK,EAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,KAAzB;AACD,KATD;AAUD,GAZM,CAAT;AAkBA,SACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEZ,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEe,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAME,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAOE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACC,MAAAA,SAAS,EAAC;AAAX,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgDf,IAAhD,CAPF,CADF,CADF;AAaD;AAED,IAAMa,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,IAAI,EAAE,CADG;AAGTC,IAAAA,eAAe,EAAE,SAHR;AAITC,IAAAA,OAAO,EAAE;AAJA;AADoB,CAAlB,CAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\nimport Header from './components/header';\nimport Stats from './components/stats';\nimport Countries from './components/countries';\nimport Statistics from './components/statistics';\nimport ApolloClient from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport get_stats from './queries';\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\n\nexport default function App() {\n\n  const client = new ApolloClient({\n    uri: 'https://covid19-graphql.netlify.app/'\n  });\n  \n  const date = (Date()).toString();\n  const[data, setData] = useState('Ghana');\n  //const { loading, error, data } = useQuery(get_stats);\n\n  useEffect(\n    function requestData() {\n      client.query({\n        query: get_stats\n      })\n      .then(response => {\n        data = response.data;\n        setData(data);\n      })\n      .catch(error => {\n        console.log('ERROR ==>', error)\n      })\n    }\n  );\n \n\n\n  \n  return (\n    <ApolloProvider client={client}>\n      <View style={styles.container}>\n        <Header/>\n        <Stats/>\n        <Countries\n          \n        />\n        <Statistics/>\n        <Text style={{textAlign:'right'}}>Last Updated:{date}</Text>\n      </View>\n    </ApolloProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    \n    backgroundColor: '#f5f5f5',\n    padding: 8,\n  }\n});\n"]},"metadata":{},"sourceType":"module"}